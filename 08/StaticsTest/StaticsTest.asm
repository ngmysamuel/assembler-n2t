
/////////// BOOTSTRAP CODE ///////////

// SP = 256
@256
D=A
@SP
M=D

// call Sys.init
 // store return address

@SYS.INIT$ret.0
D=A // set the value in @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store LCL address

@LCL
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store ARG address

@ARG
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store THIS address

@THIS
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store THAT address

@THAT
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // set new ARG location

@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1 // ARG = SP - 5 - nArgs
@ARG
M=D // D register contains the new ARG address after assembly generated by complex_arith() was called
 // Set LCL to SP
@SP
D=M
@LCL
M=D
 // GOTO function
@SYS.INIT
0;JMP // jump to function
(SYS.INIT$ret.0) // return point

/////////// End of BOOTSTRAP CODE ///////////
              

// FUNCTION CLASS1.SET 0
(CLASS1.SET)

// PUSH ARGUMENT 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1

// POP STATIC 0
@0
D=A
@CLASS1.0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D

// PUSH ARGUMENT 1
@1
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1

// POP STATIC 1
@0
D=A
@CLASS1.1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D

// PUSH CONSTANT 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1

// RETURN
 // Get return address

@LCL
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
A=D
D=M // D now contains the return address
@R13
M=D // R13 now contains the return address

 // Repositions return value for the caller
@SP
A=M-1
D=M // D now contains the return value
@ARG
A=M
M=D // Set D (return value) into ARG's location

 // Reposition SP to ARG plus 1
@ARG
D=M // D now contains ARG's address
@SP
M=D+1

@LCL
D=M // store LCL's location into D. This is FRAME

@R14
M=D-1
A=M // set register to the address that holds the previous THAT's address
D=M // D contains the previous THAT's address
@THAT
M=D // rewrites THAT's location to the previous THAT's address

@R14
M=M-1
A=M // set register to the address that holds the previous THIS's address
D=M // D contains the previous THIS's address
@THIS
M=D // rewrites THIS's location to the previous THIS's address

@R14
M=M-1
A=M // set register to the address that holds the previous ARG's address
D=M // D contains the previous ARG's address
@ARG
M=D // rewrites THIS's location to the previous ARG's address

@R14
M=M-1
A=M // set register to the address that holds the previous LCL's address
D=M // D contains the previous LCL's address
@LCL
M=D // rewrites LCL's location to the previous LCL's address

@R13 // contains the return address
A=M
0;JMP // jumps to return address

// FUNCTION CLASS1.GET 0
(CLASS1.GET)

// PUSH STATIC 0
@0
D=A
@CLASS1.0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1

// PUSH STATIC 1
@0
D=A
@CLASS1.1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1

// SUB
@SP
A=M
A=A-1
D=M
A=A-1
M=M-D
@SP
M=M-1

// RETURN
 // Get return address

@LCL
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
A=D
D=M // D now contains the return address
@R13
M=D // R13 now contains the return address

 // Repositions return value for the caller
@SP
A=M-1
D=M // D now contains the return value
@ARG
A=M
M=D // Set D (return value) into ARG's location

 // Reposition SP to ARG plus 1
@ARG
D=M // D now contains ARG's address
@SP
M=D+1

@LCL
D=M // store LCL's location into D. This is FRAME

@R14
M=D-1
A=M // set register to the address that holds the previous THAT's address
D=M // D contains the previous THAT's address
@THAT
M=D // rewrites THAT's location to the previous THAT's address

@R14
M=M-1
A=M // set register to the address that holds the previous THIS's address
D=M // D contains the previous THIS's address
@THIS
M=D // rewrites THIS's location to the previous THIS's address

@R14
M=M-1
A=M // set register to the address that holds the previous ARG's address
D=M // D contains the previous ARG's address
@ARG
M=D // rewrites THIS's location to the previous ARG's address

@R14
M=M-1
A=M // set register to the address that holds the previous LCL's address
D=M // D contains the previous LCL's address
@LCL
M=D // rewrites LCL's location to the previous LCL's address

@R13 // contains the return address
A=M
0;JMP // jumps to return address

// FUNCTION CLASS2.SET 0
(CLASS2.SET)

// PUSH ARGUMENT 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1

// POP STATIC 0
@0
D=A
@CLASS2.0
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D

// PUSH ARGUMENT 1
@1
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1

// POP STATIC 1
@0
D=A
@CLASS2.1
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D

// PUSH CONSTANT 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1

// RETURN
 // Get return address

@LCL
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
A=D
D=M // D now contains the return address
@R13
M=D // R13 now contains the return address

 // Repositions return value for the caller
@SP
A=M-1
D=M // D now contains the return value
@ARG
A=M
M=D // Set D (return value) into ARG's location

 // Reposition SP to ARG plus 1
@ARG
D=M // D now contains ARG's address
@SP
M=D+1

@LCL
D=M // store LCL's location into D. This is FRAME

@R14
M=D-1
A=M // set register to the address that holds the previous THAT's address
D=M // D contains the previous THAT's address
@THAT
M=D // rewrites THAT's location to the previous THAT's address

@R14
M=M-1
A=M // set register to the address that holds the previous THIS's address
D=M // D contains the previous THIS's address
@THIS
M=D // rewrites THIS's location to the previous THIS's address

@R14
M=M-1
A=M // set register to the address that holds the previous ARG's address
D=M // D contains the previous ARG's address
@ARG
M=D // rewrites THIS's location to the previous ARG's address

@R14
M=M-1
A=M // set register to the address that holds the previous LCL's address
D=M // D contains the previous LCL's address
@LCL
M=D // rewrites LCL's location to the previous LCL's address

@R13 // contains the return address
A=M
0;JMP // jumps to return address

// FUNCTION CLASS2.GET 0
(CLASS2.GET)

// PUSH STATIC 0
@0
D=A
@CLASS2.0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1

// PUSH STATIC 1
@0
D=A
@CLASS2.1
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1

// SUB
@SP
A=M
A=A-1
D=M
A=A-1
M=M-D
@SP
M=M-1

// RETURN
 // Get return address

@LCL
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
A=D
D=M // D now contains the return address
@R13
M=D // R13 now contains the return address

 // Repositions return value for the caller
@SP
A=M-1
D=M // D now contains the return value
@ARG
A=M
M=D // Set D (return value) into ARG's location

 // Reposition SP to ARG plus 1
@ARG
D=M // D now contains ARG's address
@SP
M=D+1

@LCL
D=M // store LCL's location into D. This is FRAME

@R14
M=D-1
A=M // set register to the address that holds the previous THAT's address
D=M // D contains the previous THAT's address
@THAT
M=D // rewrites THAT's location to the previous THAT's address

@R14
M=M-1
A=M // set register to the address that holds the previous THIS's address
D=M // D contains the previous THIS's address
@THIS
M=D // rewrites THIS's location to the previous THIS's address

@R14
M=M-1
A=M // set register to the address that holds the previous ARG's address
D=M // D contains the previous ARG's address
@ARG
M=D // rewrites THIS's location to the previous ARG's address

@R14
M=M-1
A=M // set register to the address that holds the previous LCL's address
D=M // D contains the previous LCL's address
@LCL
M=D // rewrites LCL's location to the previous LCL's address

@R13 // contains the return address
A=M
0;JMP // jumps to return address

// FUNCTION SYS.INIT 0
(SYS.INIT)

// PUSH CONSTANT 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1

// PUSH CONSTANT 8
@8
D=A
@SP
A=M
M=D
@SP
M=M+1

// CALL CLASS1.SET 2
 // store return address

@CLASS1.SET$ret.0
D=A // set the value in @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store LCL address

@LCL
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store ARG address

@ARG
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store THIS address

@THIS
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store THAT address

@THAT
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // set new ARG location

@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1 // ARG = SP - 5 - nArgs
@ARG
M=D // D register contains the new ARG address after assembly generated by complex_arith() was called
 // Set LCL to SP
@SP
D=M
@LCL
M=D
 // GOTO function
@CLASS1.SET
0;JMP // jump to function
(CLASS1.SET$ret.0) // return point

// POP TEMP 0
@0
D=A
@5
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D

// PUSH CONSTANT 23
@23
D=A
@SP
A=M
M=D
@SP
M=M+1

// PUSH CONSTANT 15
@15
D=A
@SP
A=M
M=D
@SP
M=M+1

// CALL CLASS2.SET 2
 // store return address

@CLASS2.SET$ret.1
D=A // set the value in @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store LCL address

@LCL
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store ARG address

@ARG
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store THIS address

@THIS
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store THAT address

@THAT
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // set new ARG location

@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1 // ARG = SP - 5 - nArgs
@ARG
M=D // D register contains the new ARG address after assembly generated by complex_arith() was called
 // Set LCL to SP
@SP
D=M
@LCL
M=D
 // GOTO function
@CLASS2.SET
0;JMP // jump to function
(CLASS2.SET$ret.1) // return point

// POP TEMP 0
@0
D=A
@5
D=D+A
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D

// CALL CLASS1.GET 0
 // store return address

@CLASS1.GET$ret.2
D=A // set the value in @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store LCL address

@LCL
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store ARG address

@ARG
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store THIS address

@THIS
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store THAT address

@THAT
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // set new ARG location

@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1 // ARG = SP - 5 - nArgs
@ARG
M=D // D register contains the new ARG address after assembly generated by complex_arith() was called
 // Set LCL to SP
@SP
D=M
@LCL
M=D
 // GOTO function
@CLASS1.GET
0;JMP // jump to function
(CLASS1.GET$ret.2) // return point

// CALL CLASS2.GET 0
 // store return address

@CLASS2.GET$ret.3
D=A // set the value in @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store LCL address

@LCL
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store ARG address

@ARG
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store THIS address

@THIS
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store THAT address

@THAT
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // set new ARG location

@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1 // ARG = SP - 5 - nArgs
@ARG
M=D // D register contains the new ARG address after assembly generated by complex_arith() was called
 // Set LCL to SP
@SP
D=M
@LCL
M=D
 // GOTO function
@CLASS2.GET
0;JMP // jump to function
(CLASS2.GET$ret.3) // return point

// LABEL END
(SYS.INIT$END)

// GOTO END
@SYS.INIT$END
0;JMP