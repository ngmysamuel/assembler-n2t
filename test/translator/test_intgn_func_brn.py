import os
import unittest
from tempfile import NamedTemporaryFile

import translator.VMTranslator as vmt


class TestIntegrationFuncBrn(unittest.TestCase):
    """Runs the translator on a VM file and compares.

    Tests Function Calling, Branching, and Directory translation.
    Creates 3 files:
        src_file_main: contains the Main.VM code
        src_file_sys: contains the Main.VM code
        dest_file_ans: contains the correct assembly code previously tested on the CPU
        emulator on Nand2Tetris site
    The last file, dest_file:
        Its name is derived. It will contain the translated assembly code
    """

    @classmethod
    def setUpClass(cls) -> None:
        cls.src_file_main = NamedTemporaryFile(
            delete=False,
            mode="w",
            newline="",
            prefix="vm_main",
            suffix=".vm",
        )
        cls.src_file_main_name = cls.src_file_main.name
        cls.src_file_main.write(VM_MAIN)
        cls.src_file_main.close()

        cls.src_file_sys = NamedTemporaryFile(
            delete=False,
            mode="w",
            newline="",
            prefix="vm_sys",
            suffix=".vm",
        )
        cls.src_file_sys_name = cls.src_file_sys.name
        cls.src_file_sys.write(VM_SYS)
        cls.src_file_sys.close()

        cls.dest_file_ans = NamedTemporaryFile(
            delete=False,
            mode="w",
            newline="",
            suffix=".asm",
        )
        cls.dest_file_ans_name = cls.dest_file_ans.name
        cls.dest_file_ans.write(ASM)
        cls.dest_file_ans.close()

        cls.arg = os.path.dirname(cls.src_file_sys_name)
        base_name = os.path.basename(cls.dest_file_ans_name)
        cls.dest_file_name = cls.dest_file_ans_name.replace(base_name, "Temp.asm")
        return super().setUpClass()

    @classmethod
    def tearDownClass(cls) -> None:
        os.remove(cls.src_file_sys_name)
        os.remove(cls.src_file_main_name)
        os.remove(cls.dest_file_ans_name)
        os.remove(cls.dest_file_name)

    def test_integration(self) -> None:
        vmt.main(self.arg)
        with open(os.path.join(self.arg, self.dest_file_name)) as dest_file, open(
            self.dest_file_ans_name,
        ) as dest_file_ans:
            self.assertListEqual(list(dest_file), list(dest_file_ans))


VM_SYS = """// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/8/FunctionCalls/FibonacciElement/Sys.vm

// Containts one function: Sys.init.

// Pushes a constant n onto the stack, and calls the Main.fibonacii
// function, which computes the n'th element of the Fibonacci series.
// Note that by convention, the Sys.init function is called "automatically" 
// by the bootstrap code generated by the VM translator.
function Sys.init 0
    // Computes fibonacci(4)
	push constant 4
	// Calls the function, informing that one argument was pushed onto the stack
	call Main.fibonacci 1
label END  
	goto END  // loops infinitely
"""

VM_MAIN = """// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/8/FunctionCalls/FibonacciElement/Main.vm

// Contains one function: Main.fibonacci.

// Computes the n'th element of the Fibonacci series, recursively.
// n is given in argument[0]. Called by the Sys.init function 
// (part of the Sys.vm file), which sets argument[0] to an input
// value and then calls Main.fibonacci.
function Main.fibonacci 0
	push argument 0
	push constant 2
	lt                     
	if-goto N_LT_2        
	goto N_GE_2
label N_LT_2               // if n < 2 returns n
	push argument 0        
	return
label N_GE_2               // if n >= 2 returns fib(n - 2) + fib(n - 1)
	push argument 0
	push constant 2
	sub
	call Main.fibonacci 1  // computes fib(n - 2)
	push argument 0
	push constant 1
	sub
	call Main.fibonacci 1  // computes fib(n - 1)
	add                    // returns fib(n - 1) + fib(n - 2)
	return
"""

ASM = """
/////////// BOOTSTRAP CODE ///////////

// SP = 256
@256
D=A
@SP
M=D

// call Sys.init
 // store return address

@SYS.INIT$ret.0
D=A // set the value in @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store LCL address

@LCL
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store ARG address

@ARG
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store THIS address

@THIS
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store THAT address

@THAT
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // set new ARG location

@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1 // ARG = SP - 5 - nArgs
@ARG
M=D // D register contains the new ARG address after assembly generated by complex_arith() was called
 // Set LCL to SP
@SP
D=M
@LCL
M=D
 // GOTO function
@SYS.INIT
0;JMP // jump to function
(SYS.INIT$ret.0) // return point

/////////// End of BOOTSTRAP CODE ///////////
              

// FUNCTION MAIN.FIBONACCI 0
(MAIN.FIBONACCI)

// PUSH ARGUMENT 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1

// PUSH CONSTANT 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1

// LT
@SP
A=M
A=A-1
D=M
A=A-1

D=M-D
@EQ.0
D;JLT
@SP
A=M-1
A=A-1
M=0
@DN.0
0;JMP
(EQ.0)
@SP
A=M-1
A=A-1
M=-1
(DN.0)

@SP
M=M-1

// IF-GOTO N_LT_2
@SP
M=M-1
@SP
A=M
D=M
@MAIN.FIBONACCI$N_LT_2
D;JNE

// GOTO N_GE_2
@MAIN.FIBONACCI$N_GE_2
0;JMP

// LABEL N_LT_2
(MAIN.FIBONACCI$N_LT_2)

// PUSH ARGUMENT 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1

// RETURN
 // Get return address

@LCL
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
A=D
D=M // D now contains the return address
@R13
M=D // R13 now contains the return address

 // Repositions return value for the caller
@SP
A=M-1
D=M // D now contains the return value
@ARG
A=M
M=D // Set D (return value) into ARG's location

 // Reposition SP to ARG plus 1
@ARG
D=M // D now contains ARG's address
@SP
M=D+1

@LCL
D=M // store LCL's location into D. This is FRAME

@R14
M=D-1
A=M // set register to the address that holds the previous THAT's address
D=M // D contains the previous THAT's address
@THAT
M=D // rewrites THAT's location to the previous THAT's address

@R14
M=M-1
A=M // set register to the address that holds the previous THIS's address
D=M // D contains the previous THIS's address
@THIS
M=D // rewrites THIS's location to the previous THIS's address

@R14
M=M-1
A=M // set register to the address that holds the previous ARG's address
D=M // D contains the previous ARG's address
@ARG
M=D // rewrites THIS's location to the previous ARG's address

@R14
M=M-1
A=M // set register to the address that holds the previous LCL's address
D=M // D contains the previous LCL's address
@LCL
M=D // rewrites LCL's location to the previous LCL's address

@R13 // contains the return address
A=M
0;JMP // jumps to return address

// LABEL N_GE_2
(MAIN.FIBONACCI$N_GE_2)

// PUSH ARGUMENT 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1

// PUSH CONSTANT 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1

// SUB
@SP
A=M
A=A-1
D=M
A=A-1
M=M-D
@SP
M=M-1

// CALL MAIN.FIBONACCI 1
 // store return address

@MAIN.FIBONACCI$ret.0
D=A // set the value in @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store LCL address

@LCL
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store ARG address

@ARG
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store THIS address

@THIS
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store THAT address

@THAT
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // set new ARG location

@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1 // ARG = SP - 5 - nArgs
@ARG
M=D // D register contains the new ARG address after assembly generated by complex_arith() was called
 // Set LCL to SP
@SP
D=M
@LCL
M=D
 // GOTO function
@MAIN.FIBONACCI
0;JMP // jump to function
(MAIN.FIBONACCI$ret.0) // return point

// PUSH ARGUMENT 0
@0
D=A
@ARG
A=D+M
D=M
@SP
A=M
M=D
@SP
M=M+1

// PUSH CONSTANT 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1

// SUB
@SP
A=M
A=A-1
D=M
A=A-1
M=M-D
@SP
M=M-1

// CALL MAIN.FIBONACCI 1
 // store return address

@MAIN.FIBONACCI$ret.1
D=A // set the value in @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store LCL address

@LCL
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store ARG address

@ARG
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store THIS address

@THIS
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store THAT address

@THAT
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // set new ARG location

@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1 // ARG = SP - 5 - nArgs
@ARG
M=D // D register contains the new ARG address after assembly generated by complex_arith() was called
 // Set LCL to SP
@SP
D=M
@LCL
M=D
 // GOTO function
@MAIN.FIBONACCI
0;JMP // jump to function
(MAIN.FIBONACCI$ret.1) // return point

// ADD
@SP
A=M
A=A-1
D=M
A=A-1
M=D+M
@SP
M=M-1

// RETURN
 // Get return address

@LCL
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
A=D
D=M // D now contains the return address
@R13
M=D // R13 now contains the return address

 // Repositions return value for the caller
@SP
A=M-1
D=M // D now contains the return value
@ARG
A=M
M=D // Set D (return value) into ARG's location

 // Reposition SP to ARG plus 1
@ARG
D=M // D now contains ARG's address
@SP
M=D+1

@LCL
D=M // store LCL's location into D. This is FRAME

@R14
M=D-1
A=M // set register to the address that holds the previous THAT's address
D=M // D contains the previous THAT's address
@THAT
M=D // rewrites THAT's location to the previous THAT's address

@R14
M=M-1
A=M // set register to the address that holds the previous THIS's address
D=M // D contains the previous THIS's address
@THIS
M=D // rewrites THIS's location to the previous THIS's address

@R14
M=M-1
A=M // set register to the address that holds the previous ARG's address
D=M // D contains the previous ARG's address
@ARG
M=D // rewrites THIS's location to the previous ARG's address

@R14
M=M-1
A=M // set register to the address that holds the previous LCL's address
D=M // D contains the previous LCL's address
@LCL
M=D // rewrites LCL's location to the previous LCL's address

@R13 // contains the return address
A=M
0;JMP // jumps to return address

// FUNCTION SYS.INIT 0
(SYS.INIT)

// PUSH CONSTANT 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1

// CALL MAIN.FIBONACCI 1
 // store return address

@MAIN.FIBONACCI$ret.2
D=A // set the value in @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store LCL address

@LCL
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store ARG address

@ARG
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store THIS address

@THIS
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // store THAT address

@THAT
D=M // set the value held by @value into D
@SP
A=M
M=D // push value onto stack
@SP
M=M+1 // increment stack pointer

 // set new ARG location

@SP
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1 // ARG = SP - 5 - nArgs
@ARG
M=D // D register contains the new ARG address after assembly generated by complex_arith() was called
 // Set LCL to SP
@SP
D=M
@LCL
M=D
 // GOTO function
@MAIN.FIBONACCI
0;JMP // jump to function
(MAIN.FIBONACCI$ret.2) // return point

// LABEL END
(None$END)

// GOTO END
@None$END
0;JMP"""
